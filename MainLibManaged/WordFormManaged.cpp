//#include "Analytics.h"
//#include "Verifier.h"
//#include "AspectPair.h"
//#include "..\Hlib\SqliteWrapper.h"
//#include "EnumsManaged.h"

#include "UtilsManaged.h"
#include "LexemeManaged.h"
#include "WordFormManaged.h"
#include "Singleton.h"

using namespace System;
//using namespace msclr::interop;
using namespace System::Runtime::InteropServices;
using namespace MainLibManaged;
using namespace std;

CWordFormManaged::CWordFormManaged(int64_t iHandle) : m_iHandle(iHandle)
{
    if (0 == iHandle)
    {
        int figasse = -1;
    }
}

CWordFormManaged::~CWordFormManaged()
{
    m_iHandle = -1;
}

shared_ptr<CWordForm> CWordFormManaged::spGetInstance()
{
    shared_ptr<CWordForm> spWordForm;
    auto rc = Singleton::pGetInstance()->eGetWordForm(m_iHandle, spWordForm);
    if (rc != H_NO_ERROR || nullptr == spWordForm)
    {
        throw gcnew Exception(L"Unable to retrieve word form instance.");
    }
    return spWordForm;
}


//CLexemeManaged^ CWordFormManaged::Lexeme()
//{
//    if (nullptr == m_pWordForm)
//    {
//        throw gcnew Exception(L"WordForm object is NULL.");
//    }

//    return gcnew CLexemeManaged(m_pWordForm->spLexeme().get());
//}

//CWordForm* CWordFormManaged::pWordForm()
//{
//    return m_pWordForm;
//}

String^ CWordFormManaged::sWordForm()
{
    return gcnew String(spGetInstance()->sWordForm());
}

void CWordFormManaged::SetWordForm(String^ sWordForm)
{
    spGetInstance()->SetWordForm(sFromManagedString(sWordForm));
}

long long CWordFormManaged::llWordFormDbId()
{
    return spGetInstance()->llDbId();
}

String^ CWordFormManaged::sStem()
{
    return gcnew String(spGetInstance()->sStem());
}

void CWordFormManaged::SetStem(String^ sStem)
{
    spGetInstance()->SetStem(sFromManagedString(sStem));
}

__int64 CWordFormManaged::llLexemeId()
{
    return spGetInstance()->llLexemeId();
}

EM_PartOfSpeech CWordFormManaged::ePos()
{
    return (EM_PartOfSpeech)spGetInstance()->ePos();
}

void CWordFormManaged::SetPos(EM_PartOfSpeech ePos)
{
    spGetInstance()->SetPos((ET_PartOfSpeech)ePos);
}

EM_Case CWordFormManaged::eCase()
{
    return (EM_Case)spGetInstance()->eCase();
}

void CWordFormManaged::SetCase(EM_Case eCase)
{
    spGetInstance()->SetCase((ET_Case)eCase);
}

EM_Number CWordFormManaged::eNumber()
{
    return (EM_Number)spGetInstance()->eNumber();
}

void CWordFormManaged::SetNumber(EM_Number eNumber)
{
    spGetInstance()->SetNumber((ET_Number)eNumber);
}

EM_Subparadigm CWordFormManaged::eSubparadigm()
{
    return (EM_Subparadigm)spGetInstance()->eSubparadigm();
}

void CWordFormManaged::SetSubparadigm(EM_Subparadigm eSubparadigm)
{
    spGetInstance()->SetSubparadigm((ET_Subparadigm)eSubparadigm);
}

EM_Gender CWordFormManaged::eGender()
{
    return (EM_Gender)spGetInstance()->eGender();
}

void CWordFormManaged::SetGender(EM_Gender eGender)
{
    spGetInstance()->SetGender((ET_Gender)eGender);
}

EM_Person CWordFormManaged::ePerson()
{
    return (EM_Person)spGetInstance()->ePerson();
}

void CWordFormManaged::SetPerson(EM_Person ePerson)
{
    spGetInstance()->SetPerson((ET_Person)ePerson);
}

EM_Animacy CWordFormManaged::eAnimacy()
{
    return (EM_Animacy)spGetInstance()->eAnimacy();
}

void CWordFormManaged::SetAnimacy(EM_Animacy eAnimacy)
{
    spGetInstance()->SetAnimacy((ET_Animacy)eAnimacy);
}

EM_Reflexive CWordFormManaged::eReflexive()
{
    return (EM_Reflexive)spGetInstance()->eReflexive();
}

void CWordFormManaged::SetReflexivity(EM_Reflexive eReflexive)
{
    spGetInstance()->SetReflexivity((ET_Reflexivity)eReflexive);
}

EM_Aspect CWordFormManaged::eAspect()
{
    return (EM_Aspect)spGetInstance()->eAspect();
}

void CWordFormManaged::SetAspect(EM_Aspect eAspect)
{
    spGetInstance()->SetAspect((ET_Aspect)eAspect);
}

EM_Status CWordFormManaged::eStatus()
{
    return (EM_Status)spGetInstance()->eStatus();
}

void CWordFormManaged::SetStatus(EM_Status eStatus)
{
    spGetInstance()->SetStatus((ET_Status)eStatus);
}

bool CWordFormManaged::bIrregular()      // came from the DB as opposed to being generated by the app
{
    return spGetInstance()->bIrregular();
}

void CWordFormManaged::SetIrregular(bool bIrregular)
{
    spGetInstance()->SetIrregular(bIrregular);
}

String^ CWordFormManaged::sLeadComment()
{
    return gcnew String(spGetInstance()->sLeadComment());
}

void CWordFormManaged::SetLeadComment(String^ sLeadComment)
{
    spGetInstance()->SetLeadComment(sFromManagedString(sLeadComment));
}

String^ CWordFormManaged::sTrailingComment()
{
    return gcnew String(spGetInstance()->sTrailingComment());
}

void CWordFormManaged::SetTrailingComment(String^ sTrailingComment)
{
    spGetInstance()->SetTrailingComment(sFromManagedString(sTrailingComment));
}

bool CWordFormManaged::bIsEdited()
{
    return spGetInstance()->bIsEdited();
}

void CWordFormManaged::SetIsEdited(bool bIsEdited)
{
    return spGetInstance()->SetIsEdited(bIsEdited);
}

bool CWordFormManaged::bIsVariant()
{
    return spGetInstance()->bIsVariant();
}

void CWordFormManaged::SetIsVariant(bool bIsVariant)
{
    return spGetInstance()->SetIsVariant(bIsVariant);
}

EM_ReturnCode CWordFormManaged::eGetFirstStressPos(int% iPos, EM_StressType% eType)
{
    int cppiPos = -1;
    ET_StressType cppeType = ET_StressType::STRESS_TYPE_UNDEFINED;
    ET_ReturnCode eRet = spGetInstance()->eGetFirstStressPos(cppiPos, cppeType);
    if (H_NO_ERROR == eRet)
    {
        iPos = cppiPos;
        eType = (EM_StressType)cppeType;
    }

    return (EM_ReturnCode)eRet;
}

EM_ReturnCode CWordFormManaged::eGetNextStressPos(int% iPos, EM_StressType% eType)
{
    int cppiPos = -1;
    ET_StressType cppeType = ET_StressType::STRESS_TYPE_UNDEFINED;
    ET_ReturnCode eRet = spGetInstance()->eGetNextStressPos(cppiPos, cppeType);
    if (H_NO_ERROR == eRet)
    {
        iPos = cppiPos;
        eType = (EM_StressType)cppeType;
    }

    return (EM_ReturnCode)eRet;
}

EM_ReturnCode CWordFormManaged::eSetStressPositions(Collections::Generic::Dictionary<int, EM_StressType>^ dctStressPositions)
{
    Collections::Generic::Dictionary<int, EM_StressType>::Enumerator^ enumerator = dctStressPositions->GetEnumerator();
    map<int, ET_StressType> mapStressPositions;
    while (enumerator->MoveNext())
    {
        int iPos = enumerator->Current.Key;
        EM_StressType eType = enumerator->Current.Value;
        mapStressPositions[iPos] = (ET_StressType)eType;
    }

    ET_ReturnCode eRet = spGetInstance()->eSetStressPositions(mapStressPositions);

    return (EM_ReturnCode)eRet;
}

String^ CWordFormManaged::sGramHash()
{
    return gcnew String(spGetInstance()->sGramHash());
}

EM_ReturnCode CWordFormManaged::eInitFromHash(String^ sHash)
{
    return (EM_ReturnCode)spGetInstance()->eInitFromHash(sFromManagedString(sHash));
}

EM_ReturnCode CWordFormManaged::eSaveIrregularForm()
{
    return (EM_ReturnCode)spGetInstance()->eSaveIrregularForm();
}

//EM_ReturnCode CWordFormManaged::eSetIrregularStressPositions(Dictionary<int, EM_StressType>^ dictPositions)
//{
//    if (nullptr == m_pWordForm)
//    {
//        throw gcnew Exception(L"WordForm object is NULL.");
//    }

//    map<int, ET_StressType> mapPositions;
//    for each (KeyValuePair<int, EM_StressType> pairPosition in dictPositions)
//    {
//        mapPositions[pairPosition.Key] = (ET_StressType)pairPosition.Value;
//    }

//    auto eRet = m_pWordForm->eSaveIrregularStress(mapPositions);

//    return (EM_ReturnCode)eRet;
//}

